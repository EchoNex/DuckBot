<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="err_badcode" xml:space="preserve">
    <value>Niedozwolone słowa kluczowe zostały znalezione w kodzie.</value>
  </data>
  <data name="err_compile" xml:space="preserve">
    <value>Błąd kompilacji</value>
  </data>
  <data name="err_generic" xml:space="preserve">
    <value>Wystąpił błąd</value>
  </data>
  <data name="err_nogeneric" xml:space="preserve">
    <value>Nie istnieje {0} o podanej nazwie.</value>
  </data>
  <data name="err_nolanguage" xml:space="preserve">
    <value>Język z podanym kodem nie jest dostępny.</value>
  </data>
  <data name="err_nosong" xml:space="preserve">
    <value>Nie znaleziono piosenki `{0}`!</value>
  </data>
  <data name="err_nosubcmd" xml:space="preserve">
    <value>Podano nieznaną podkomendę.</value>
  </data>
  <data name="err_notadmin" xml:space="preserve">
    <value>Tylko ludzcy administratorzy serwera mogą używać tej komendy!</value>
  </data>
  <data name="err_params" xml:space="preserve">
    <value>Podano niewystarczającą liczbę parametrów.</value>
  </data>
  <data name="err_permissions" xml:space="preserve">
    <value>Nie posiadasz wystarczających uprawnień!</value>
  </data>
  <data name="err_scrtimeout" xml:space="preserve">
    <value>Przekroczono limit czasu wykonywania skryptu!</value>
  </data>
  <data name="err_syntax" xml:space="preserve">
    <value>Komenda nie mogła zostać przetworzona z powodu błędu składni.</value>
  </data>
  <data name="exit_end" xml:space="preserve">
    <value>Czyste wyjście</value>
  </data>
  <data name="exit_start" xml:space="preserve">
    <value>Zamykanie DuckBota...</value>
  </data>
  <data name="info_credits" xml:space="preserve">
    <value>Bot napisany przez: **Xspeed** i **EchoDuck**
*Podziękowania:*
 Discord.Net - RogueException
 Castle.Core - Ekipa Castle Project
 CSCore - Florian Rosmann
 NLua - Vinicius Jarina</value>
  </data>
  <data name="lab_action" xml:space="preserve">
    <value>akcja</value>
  </data>
  <data name="lab_channel" xml:space="preserve">
    <value>kanał</value>
  </data>
  <data name="lab_cmd" xml:space="preserve">
    <value>komenda</value>
  </data>
  <data name="lab_content" xml:space="preserve">
    <value>zawartość</value>
  </data>
  <data name="lab_language" xml:space="preserve">
    <value>kodJęzyka</value>
  </data>
  <data name="lab_literal" xml:space="preserve">
    <value>Dokładny ciąg</value>
  </data>
  <data name="lab_message" xml:space="preserve">
    <value>wiadomość</value>
  </data>
  <data name="lab_name" xml:space="preserve">
    <value>nazwa</value>
  </data>
  <data name="lab_optional" xml:space="preserve">
    <value>Opcjonalne</value>
  </data>
  <data name="lab_prefix" xml:space="preserve">
    <value>prefiks</value>
  </data>
  <data name="lab_required" xml:space="preserve">
    <value>Wymagane</value>
  </data>
  <data name="lab_type" xml:space="preserve">
    <value>typ</value>
  </data>
  <data name="lab_user" xml:space="preserve">
    <value>użytkownik</value>
  </data>
  <data name="lab_usercmd" xml:space="preserve">
    <value>komenda użytkownika</value>
  </data>
  <data name="lab_var" xml:space="preserve">
    <value>zmienna</value>
  </data>
  <data name="ret_changes" xml:space="preserve">
    <value>Zmieniono z: {0}
Na: {1}</value>
  </data>
  <data name="ret_cmdhelp" xml:space="preserve">
    <value>Użycie: `{0} {1}`
Notacja: `{2}`</value>
  </data>
  <data name="ret_cmdinfo" xml:space="preserve">
    <value>Nazwa komendy: `{0}`
Utworzona: `{1}` przez `{2}`</value>
  </data>
  <data name="ret_delivery" xml:space="preserve">
    <value>OK, doręczę wiadomość gdy {0} pojawi się</value>
  </data>
  <data name="ret_empty" xml:space="preserve">
    <value>nic nie zwrócił.</value>
  </data>
  <data name="ret_empty_cmd" xml:space="preserve">
    <value>Komenda nic nie zwróciła.</value>
  </data>
  <data name="ret_empty_script" xml:space="preserve">
    <value>Skrypt nic nie zwrócił.</value>
  </data>
  <data name="ret_removed" xml:space="preserve">
    <value>Usunięto: {0} `{1}`.</value>
  </data>
  <data name="ret_song" xml:space="preserve">
    <value>Znaleziono piosenkę `{0}`</value>
  </data>
  <data name="ret_songend" xml:space="preserve">
    <value>Piosenka `{0}` skończyła się</value>
  </data>
  <data name="ret_success" xml:space="preserve">
    <value>Operacja ukończona.</value>
  </data>
  <data name="start_err_badtoken" xml:space="preserve">
    <value>Plik tokena ma nieprawidłowy format!</value>
  </data>
  <data name="start_err_fileload" xml:space="preserve">
    <value>Błąd wczytywania pliku '{0}'!</value>
  </data>
  <data name="start_err_notoken" xml:space="preserve">
    <value>Plik tokena nie został znaleziony!</value>
  </data>
  <data name="start_info" xml:space="preserve">
    <value>Startuje {0}, naciśnij 'Q' aby zakończyć!</value>
  </data>
  <data name="title_fullinbox" xml:space="preserve">
    <value>Ta wiadomość została usunięta ze skrzynki:</value>
  </data>
  <data name="title_hardcmdlist" xml:space="preserve">
    <value>Lista wbudowanych komend:</value>
  </data>
  <data name="title_inbox" xml:space="preserve">
    <value>Wiadomości od `{0}`:</value>
  </data>
  <data name="title_usercmdlist" xml:space="preserve">
    <value>Lista komend użytkownika:</value>
  </data>
  <data name="title_varlist" xml:space="preserve">
    <value>Lista zmiennych:</value>
  </data>
</root>